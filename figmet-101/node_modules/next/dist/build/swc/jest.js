"use strict";
var _vm = _interopRequireDefault(require("vm"));
var _index = require("./index");
var _options = require("./options");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
console.warn('"next/jest" is currently experimental. https://nextjs.org/docs/messages/experimental-jest-transformer');
/**
 * Loads closest package.json in the directory hierarchy
 */ function loadClosestPackageJson(attempts = 1) {
    if (attempts > 5) {
        throw new Error("Can't resolve main package.json file");
    }
    var mainPath = attempts === 1 ? './' : Array(attempts).join('../');
    try {
        return require(mainPath + 'package.json');
    } catch (e) {
        return loadClosestPackageJson(attempts + 1);
    }
}
const packageConfig = loadClosestPackageJson();
const isEsmProject = packageConfig.type === 'module';
// Jest use the `vm` [Module API](https://nodejs.org/api/vm.html#vm_class_vm_module) for ESM.
// see https://github.com/facebook/jest/issues/9430
const isSupportEsm = 'Module' in _vm.default;
module.exports = {
    process (src, filename, jestOptions) {
        if (!/\.[jt]sx?$/.test(filename)) {
            return src;
        }
        let swcTransformOpts = (0, _options).getJestSWCOptions({
            filename,
            esm: isSupportEsm && isEsm(filename, jestOptions)
        });
        return((0, _index).transformSync(src, {
            ...swcTransformOpts,
            filename
        }));
    }
};
function getJestConfig(jestConfig) {
    return 'config' in jestConfig ? jestConfig.config : jestConfig;
}
function isEsm(filename, jestOptions) {
    var ref;
    return /\.jsx?$/.test(filename) && isEsmProject || ((ref = getJestConfig(jestOptions).extensionsToTreatAsEsm) === null || ref === void 0 ? void 0 : ref.find((ext)=>filename.endsWith(ext)
    ));
}

//# sourceMappingURL=jest.js.map